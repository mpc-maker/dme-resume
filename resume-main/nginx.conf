user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
	worker_connections 768;
	# multi_accept on;
}

http {

	##
	# Basic Settings
	##

	sendfile on;
	tcp_nopush on;
	types_hash_max_size 2048;
	# server_tokens off;

	# server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

  # 设置了Keep-Alive超时时间，即HTTP长连接的超时时间
  keepalive_timeout 65;

	##
	# SSL Settings
	##

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE
	ssl_prefer_server_ciphers on;

	##
	# Logging Settings
	##

	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log;

	##
	# Gzip Settings
	##

	gzip on;
 
   gzip_min_length 1k;
   gzip_comp_level 6;
   gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-http-php;

	# gzip_vary on;
	# gzip_proxied any;
	# gzip_comp_level 6;
	# gzip_buffers 16 8k;
	# gzip_http_version 1.1;
	# gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

	##
	# Virtual Host Configs
	##
 
 # proxy_cache_path /opt/nginxcache keys_zone=NCache:60m levels=1:2 inactive=3h max_size=20g;
 
 server {
    # listen 80; 和 listen [::]:80; 这两行配置指示Nginx监听HTTP请求的80端口，分别支持IPv4和IPv6。这是Web服务器默认的HTTP端口。
    listen 80;
    listen [::]:80;
    # 这里指定了虚拟主机的域名，这里是localhost。这意味着这个虚拟主机会响应访问localhost的HTTP请求。
    server_name www.omedoor.com;
    
    #使用NCache
    #proxy_cache NCache;
    #proxy_cache_key "$host$request_uri$cookie_JSESSIONID";
    #proxy_cache_valid 200 206 304 301 302 10m;
    #proxy_cache_valid any 1m;
    #proxy_cache_background_update on;
  
    # access_log  /var/log/nginx/host.access.log  main;
  
    # 这是一个配置块，定义了对于根路径 / 的请求应该如何处理。
    location / {
      #add_header Nginx-Cache $upstream_cache_status;
      #proxy_ignore_headers X-Accel-Expires Expires Cache-Control Set-Cookie;
      # 这指定了Nginx应该在响应这个虚拟主机的请求时从哪里获取文件。在这里，文件将从/usr/share/nginx/html目录中获取。
      root /opt/resume-main;
      # 这里列出了默认的索引文件。如果请求的URL以 / 结尾，Nginx将尝试查找并提供 index.html 或 index.htm 文件。
      index index.html index.htm;
     }
     
    #location ~* \.(css|js)$ {
    #  expires 1y;
    #  add_header Cache-Control "public"; 
    #}
  
    location /axiosApi/ {
      proxy_pass http://localhost:3000/;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    location /static {
      alias /opt/node-ts-resume/public;
      # 这里列出了默认的索引文件。如果请求的URL以 / 结尾，Nginx将尝试查找并提供 index.html 或 index.htm 文件。
      index index.html index.htm;
    }
  
    # error_page  404        /404.html;
    # redirect server error pages to the static page /50x.html
  
    # 这些配置定义了当发生500系列错误时，Nginx应该显示一个自定义的错误页面 50x.html。这个错误页面位于/usr/share/nginx/html目录下。
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
      root /usr/share/nginx/html;
     }
  
    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ .php$ {
    #   proxy_pass  http://127.0.0.1;
    #}
  
    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ .php$ {
    #   root      html;
    #   fastcgi_pass  127.0.0.1:9000;
    #   fastcgi_index  index.php;
    #   fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #   include     fastcgi_params;
    #}
    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /.ht {
    #   deny  all;
    #}
  }

	# include /etc/nginx/conf.d/*.conf;
	# include /etc/nginx/sites-enabled/*;
}


#mail {
#	# See sample authentication script at:
#	# http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript
#
#	# auth_http localhost/auth.php;
#	# pop3_capabilities "TOP" "USER";
#	# imap_capabilities "IMAP4rev1" "UIDPLUS";
#
#	server {
#		listen     localhost:110;
#		protocol   pop3;
#		proxy      on;
#	}
#
#	server {
#		listen     localhost:143;
#		protocol   imap;
#		proxy      on;
#	}
#}
